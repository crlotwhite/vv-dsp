name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [RelWithDebInfo]
        sanitize: [none]
        include:
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            sanitize: none
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            sanitize: asan_ubsan
          - os: macos-latest
            build_type: RelWithDebInfo
            sanitize: none
          - os: windows-latest
            build_type: RelWithDebInfo
            sanitize: none
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install Python deps (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build \
            -DVERIFY_WITH_PYTHON=ON \
            -DVV_DSP_BUILD_TESTS=ON \
            ${{ matrix.sanitize == 'asan_ubsan' && '-DVV_DSP_ENABLE_ASAN=ON -DVV_DSP_ENABLE_UBSAN=ON' || '' }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake (macOS/Windows)
        if: runner.os != 'Linux'
        run: >
          cmake -S . -B build
          -DVERIFY_WITH_PYTHON=ON
          -DVV_DSP_BUILD_TESTS=ON
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build build --config ${{ matrix.build_type }} -j

      - name: Build (macOS/Linux)
        if: runner.os != 'Windows'
        run: cmake --build build -j

      - name: Run validation tests (Linux)
        if: runner.os == 'Linux'
        run: ctest --test-dir build -L validation --output-on-failure

      - name: Run validation tests (Windows - reserved)
        if: runner.os == 'Windows' && false
        run: ctest --test-dir build -C ${{ matrix.build_type }} -L validation --output-on-failure

      - name: Run full test suite (Windows)
        if: runner.os == 'Windows'
        run: ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure

      - name: Run full test suite (macOS/Linux)
        if: runner.os != 'Windows'
        run: ctest --test-dir build --output-on-failure
